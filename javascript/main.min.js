/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
!function() {

}();
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
!function() {


function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

document.addEventListener("DOMContentLoaded", function () {
  var body = document.querySelector('body'); // Sticky header

  var offset = 0;
  var delta = 0;
  var header = document.querySelector('#header');

  var scrollPosition = function scrollPosition() {
    return window.pageYOffset || document.documentElement.scrollTop;
  };

  var lastScrollPosition = 0;
  window.addEventListener('scroll', function () {
    var currentScrollPosition = scrollPosition();

    if (Math.abs(lastScrollPosition - currentScrollPosition) >= delta) {
      if (currentScrollPosition > offset) {
        header.classList.add('is-sticky');
        body.classList.add('is-sticky-header');
      } else {
        header.classList.remove('is-sticky');
        body.classList.remove('is-sticky-header');
      }
    }

    lastScrollPosition = currentScrollPosition;
  }, {
    passive: true
  }); // Smooth scroll to

  var obs = new ResizeObserver(function (enrties) {
    var headerHeight = header.offsetHeight;
    document.documentElement.style.setProperty('--header-height', "".concat(headerHeight, "px"));
  });
  obs.observe(header); // Initialize swiper slider

  if (document.getElementById('swiper')) {
    var swiper = new Swiper('#swiper', {
      slidesPerView: 1,
      speed: 400,
      spaceBetween: 0,
      loop: true,
      effect: "fade",
      centeredSlides: true,
      autoplay: {
        delay: 5000,
        disableOnInteraction: false
      },
      navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev"
      },
      pagination: {
        el: ".swiper-pagination",
        clickable: true
      }
    });
  } // Initialize popovers


  var popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]');

  var popoverList = _toConsumableArray(popoverTriggerList).map(function (popoverTriggerEl) {
    return new bootstrap.Popover(popoverTriggerEl);
  }); // Hide/Show Form Input


  document.querySelectorAll('[data-toggle="condition"]').forEach(function (el) {
    var target = document.querySelector(el.getAttribute('data-target'));
    var bsCollapse = new bootstrap.Collapse(target, {
      toggle: false
    });
    var condition = el.getAttribute('data-condition');
    var needHide = el.getAttribute('data-needhide') ? el.getAttribute('data-needhide') : false;

    if (target && condition) {
      el.addEventListener('change', function () {
        if (el.value == condition) {
          bsCollapse.show();
        } else {
          bsCollapse.hide();
        }
      });
    }
  }); // Replace select

  var selectTriggerList = document.querySelectorAll('[data-trigger="choices"]');
  selectTriggerList.forEach(function (el) {
    var choices = new Choices(el, {
      shouldSort: false,
      searchEnabled: false,
      itemSelectText: ''
    });
  }); // Rating

  var ratingStars = _toConsumableArray(document.getElementsByClassName("rating__star"));

  function executeRating(stars) {
    var starClassActive = "rating__star is-active";
    var starClassInactive = "rating__star";
    var starsLength = stars.length;
    var i;
    stars.forEach(function (star) {
      star.onclick = function () {
        var rating = star.parentNode;
        i = stars.indexOf(star);
        rating.querySelector('input.js-rating').value = i + 1;

        if (star.className === starClassInactive) {
          for (i; i >= 0; --i) {
            stars[i].className = starClassActive;
          }
        } else {
          for (i++; i < starsLength; ++i) {
            stars[i].className = starClassInactive;
          }
        }
      };
    });
  }

  executeRating(ratingStars); // Animation on scroll

  AOS.init({
    once: true
  });
});
}();
/******/ })()
;